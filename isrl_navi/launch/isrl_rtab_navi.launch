<launch>
  <!-- lidar -->
  <include file="$(find rplidar_ros)/launch/rplidar_a3.launch"/>
  
  <!-- ZED Camera launch file -->
  <include file="$(find zed_wrapper)/launch/zed_no_tf.launch"/>
  
  <!-- isrl robot model -->
  <include file="$(find isrl_urdf)/launch/isrl_bringup.launch"/>

  <!-- odometry -->
  <node pkg="isrl_odom2" name="isrl_odom2_node" type="isrl_odom2_node"/>

  <!-- AMCL -->
  <include file="$(find isrl_navi)/launch/amcl.launch"/>

  <arg name="database_path"
    default="/home/isrl-orin1/Documents/rtabmap.db"/>
  <arg name="localization"      default="true"/>

  <arg name="wait_for_transform"  default="0.2"/>
  <arg name="rviz"                  default="false"/>
  <arg name="use_rtabmapviz"            default="false"/>

  <arg     if="$(arg localization)" name="args"  default=""/>
  <arg unless="$(arg localization)" name="args"  default="--delete_db_on_start"/>

  <!-- Navigation stuff (move_base) -->
  <include file="$(find isrl_navi)/launch/move_base.launch"/>

  <!-- Mapping -->
  <group ns="rtabmap">

    <node name="rtabmap" pkg="rtabmap_slam" type="rtabmap" output="screen" args="$(arg args)">
      <param name="database_path"       type="string" value="$(arg database_path)"/>
      <param name="frame_id"            type="string" value="base_footprint"/>
      <param name="odom_frame_id"       type="string" value="odom"/>
      <param name="wait_for_transform_duration"  type="double"   value="$(arg wait_for_transform)"/>
      <param name="subscribe_depth"     type="bool"   value="true"/>
      <param name="subscribe_scan"      type="bool"   value="true"/>

      <!-- inputs -->
      <remap from="scan" to="/scan"/>
      <remap from="rgb/image" to="/zed_node/rgb/image_rect_color"/>
      <remap from="depth/image" to="/zed_node/depth/depth_registered_cropped"/>
      <remap from="rgb/camera_info" to="/zed_node/rgb/camera_info"/>

      <!-- output -->
      <remap from="grid_map" to="/map"/>

      <param name="RGBD/NeighborLinkRefining" type="string" value="true"/>  <!-- Do odometry correction with consecutive laser scans -->
      <param name="RGBD/ProximityBySpace"     type="string" value="true"/>  <!-- Local loop closure detection (using estimated position) with locations in WM -->
      <param name="RGBD/ProximityByTime"      type="string" value="false"/> <!-- Local loop closure detection with locations in STM -->
      <param name="RGBD/ProximityPathMaxNeighbors" type="string" value="10"/> <!-- Do also proximity detection by space by merging close scans together. -->
      <param name="Reg/Strategy"              type="string" value="2"/>     <!-- 0=Visual, 1=ICP, 2=Visual+ICP -->
      <param name="Vis/MinInliers"        type="string" value="12"/>   <!-- 3D visual words correspondence distance -->
      <param name="RGBD/OptimizeFromGraphEnd" type="string" value="true"/> <!-- Optimize graph from initial node so /map -> /odom transform will be generated -->
      <param name="RGBD/OptimizeMaxError"     type="string" value="3"/>    <!-- Reject any loop closure causing large errors (>3x link's covariance) in the map -->
      <param name="Reg/Force3DoF"             type="string" value="true"/>  <!-- 2D SLAM -->
      <param name="Grid/FromDepth"            type="string" value="false"/> <!-- Create 2D occupancy grid from laser scan -->
      <param name="Mem/STMSize"               type="string" value="30"/>    <!-- increased to 30 to avoid adding too many loop closures on just seen locations -->
      <param name="RGBD/LocalRadius"          type="string" value="5"/>     <!-- limit length of proximity detections -->
      <param name="Icp/CorrespondenceRatio"   type="string" value="0.4"/>   <!-- minimum scan overlap to accept loop closure -->

      <!-- localization mode(지도수정) -->
      <param     if="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="false"/>
      <param unless="$(arg localization)" name="Mem/IncrementalMemory" type="string" value="true"/>
      <param name="Mem/InitWMWithAllNodes" type="string" value="$(arg localization)"/>
    </node>

  </group>
  <!-- rviz -->
  <node if="$(arg rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find isrl_slam)/rviz/rtab.rviz" output="screen"/>
</launch>