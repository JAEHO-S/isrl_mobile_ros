// Generated by gencpp from file motor4_iterm/iterm.msg
// DO NOT EDIT!


#ifndef MOTOR4_ITERM_MESSAGE_ITERM_H
#define MOTOR4_ITERM_MESSAGE_ITERM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace motor4_iterm
{
template <class ContainerAllocator>
struct iterm_
{
  typedef iterm_<ContainerAllocator> Type;

  iterm_()
    : LF(0.0)
    , LB(0.0)
    , RF(0.0)
    , RB(0.0)  {
    }
  iterm_(const ContainerAllocator& _alloc)
    : LF(0.0)
    , LB(0.0)
    , RF(0.0)
    , RB(0.0)  {
  (void)_alloc;
    }



   typedef float _LF_type;
  _LF_type LF;

   typedef float _LB_type;
  _LB_type LB;

   typedef float _RF_type;
  _RF_type RF;

   typedef float _RB_type;
  _RB_type RB;





  typedef boost::shared_ptr< ::motor4_iterm::iterm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::motor4_iterm::iterm_<ContainerAllocator> const> ConstPtr;

}; // struct iterm_

typedef ::motor4_iterm::iterm_<std::allocator<void> > iterm;

typedef boost::shared_ptr< ::motor4_iterm::iterm > itermPtr;
typedef boost::shared_ptr< ::motor4_iterm::iterm const> itermConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::motor4_iterm::iterm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::motor4_iterm::iterm_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::motor4_iterm::iterm_<ContainerAllocator1> & lhs, const ::motor4_iterm::iterm_<ContainerAllocator2> & rhs)
{
  return lhs.LF == rhs.LF &&
    lhs.LB == rhs.LB &&
    lhs.RF == rhs.RF &&
    lhs.RB == rhs.RB;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::motor4_iterm::iterm_<ContainerAllocator1> & lhs, const ::motor4_iterm::iterm_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace motor4_iterm

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::motor4_iterm::iterm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::motor4_iterm::iterm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor4_iterm::iterm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::motor4_iterm::iterm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor4_iterm::iterm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::motor4_iterm::iterm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::motor4_iterm::iterm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4f7dae22bb68cd0dc3716ba993b913b";
  }

  static const char* value(const ::motor4_iterm::iterm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4f7dae22bb68cd0ULL;
  static const uint64_t static_value2 = 0xdc3716ba993b913bULL;
};

template<class ContainerAllocator>
struct DataType< ::motor4_iterm::iterm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "motor4_iterm/iterm";
  }

  static const char* value(const ::motor4_iterm::iterm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::motor4_iterm::iterm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 LF\n"
"float32 LB\n"
"float32 RF\n"
"float32 RB\n"
;
  }

  static const char* value(const ::motor4_iterm::iterm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::motor4_iterm::iterm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LF);
      stream.next(m.LB);
      stream.next(m.RF);
      stream.next(m.RB);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct iterm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::motor4_iterm::iterm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::motor4_iterm::iterm_<ContainerAllocator>& v)
  {
    s << indent << "LF: ";
    Printer<float>::stream(s, indent + "  ", v.LF);
    s << indent << "LB: ";
    Printer<float>::stream(s, indent + "  ", v.LB);
    s << indent << "RF: ";
    Printer<float>::stream(s, indent + "  ", v.RF);
    s << indent << "RB: ";
    Printer<float>::stream(s, indent + "  ", v.RB);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOTOR4_ITERM_MESSAGE_ITERM_H
